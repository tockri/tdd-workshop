package com.example.tdd_workshop.schedule.db;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.jdbc.DataJdbcTest;

import java.time.LocalDateTime;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;

@DataJdbcTest
@DisplayName("ScheduleRepository")
class ScheduleRepositoryTest {

    private static final LocalDateTime dt1_2_3_4 = LocalDateTime.of(2025, 1, 2, 3, 4);
    private static final LocalDateTime dt1_2_5_6 = LocalDateTime.of(2025, 1, 2, 5, 6);

    @Autowired
    private ScheduleRepository scheduleRepository;

    @Nested
    @DisplayName("save()")
    class Save {
        @Test
        @DisplayName("ScheduleRecordを保存でき、取得できる＝ScheduleRecordの定義がDBと一致している")
        void successfullySave() {
            // Arrange
            ScheduleRecord schedule = new ScheduleRecord(
                    null, // ID will be generated by the database
                    "Test Schedule",
                    "This is a test schedule.",
                    dt1_2_3_4,
                    dt1_2_5_6
            );

            // Act
            var savedSchedule = scheduleRepository.save(schedule);
            var retrievedSchedule = scheduleRepository.findById(savedSchedule.id()).orElse(null);

            // Assert
            assertThat(retrievedSchedule).isNotNull();
            assertEquals("Test Schedule", retrievedSchedule.title());
            assertEquals("This is a test schedule.", retrievedSchedule.description());
            assertEquals(dt1_2_3_4, retrievedSchedule.startTime());
            assertEquals(dt1_2_5_6, retrievedSchedule.endTime());
        }
    }

    @Nested
    @DisplayName("findAll()")
    class FindAll {
        @Test
        @DisplayName("全てのScheduleRecordをList<ScheduleRecord>型で取得できる")
        void successfullyFindAll() {
            // Arrange
            ScheduleRecord schedule1 = new ScheduleRecord(
                    null,
                    "Schedule 1",
                    "Description 1",
                    dt1_2_3_4,
                    dt1_2_5_6
            );
            scheduleRepository.save(schedule1);

            // Act
            var schedules = scheduleRepository.findAll();

            // Assert
            assertThat(schedules).isInstanceOf(List.class);
            assertThat(schedules.get(0)).isInstanceOf(ScheduleRecord.class);
        }
    }

}
